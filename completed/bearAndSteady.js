//https://www.hackerrank.com/challenges/bear-and-steady-gene/problem\

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

// Complete the steadyGene function below.
function steadyGene(gene) {
    //find number of each letter to replace
    const targets = findTargetLetters(gene);
    if (Object.keys(targets).length === 0) return 0;
    //find first substring of any size that can be swapped
    let [start, end, letters] = findFirstSubstring(gene, targets);
    //make it smaller
    while( end < gene.length ){
        //decrement the left part
        //when decrementing, make sure it still meets the target
        [start, end, letters] = decrementLeft(gene, targets, start, end, letters);
        //move the inspection
        letters[ gene.charAt(start) ] -= 1;
        start += 1;
        end += 1;
        letters[ gene.charAt(end) ] += 1;
    }
    return end - start + 1;
}

function findTargetLetters(gene){
    //bugs if gene is not the right format
    const correctAmount = gene.length / 4;
    const targets = {
        A: -1 * correctAmount,
        G: -1 * correctAmount,
        T: -1 * correctAmount,
        C: -1 * correctAmount,
    };
    for (let index = 0; index < gene.length; index += 1){
        targets[ gene.charAt(index) ] += 1;
    }
    Object.keys(targets).forEach( letter => {
        if ( targets[letter] < 1 ){
            delete targets[letter];
        }
    });
    return targets;
}

function findFirstSubstring(gene, targets){
    const letters = {
        A: 0,
        G: 0,
        T: 0,
        C: 0,
    };
    let end = -1;
    let shouldReplaceGene = findIfShouldReplaceGene(letters, targets);
    while ( !shouldReplaceGene && end < gene.length ){
        end += 1;
        let letter = gene.charAt(end);
        letters[letter] += 1;
        shouldReplaceGene = findIfShouldReplaceGene(letters, targets);
        if ( end === gene.length ){
            console.log( 'WARNING!: findFirstSubstring failed!');
        }
    }
    return [0, end, letters];
}

function findIfShouldReplaceGene(letters, targets){
    return Object.keys( targets ).every( letter => {
        return targets[letter] <= letters[letter];
    })
}

function decrementLeft(gene, targets, start, end, letters){
    let letter = gene.charAt(start);
    let letterIsImportant = Object.keys(targets).length > 0 && targets[letter] && targets[letter] >= letters[letter];
    while ( !letterIsImportant && findIfShouldReplaceGene(letters, targets) ){
        letters[letter] -= 1;
        start += 1;
        letter = gene.charAt(start);
        letterIsImportant = targets[letter] && targets[letter] >= letters[letter];
    }
    return [start, end, letters];
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine(), 10);

    const gene = readLine();

    let result = steadyGene(gene);

    ws.write(result + "\n");

    ws.end();
}


// // const test = steadyGene('TATATAGCTTGTCTCCCTAATGTTAGTTCATGCTCGTAAGAGAACTTAGCCTACTAGGACGAGAGAACCGCACGGCGTCGTGAGGTATTTTTCGTAGGACACGCCAGATAGACGGTGGCAATGCCCGTTCAATATGACGCGATGTACGGCTAATGGGAACACTGCCCGACGCGTCTTTAGGACTGTGAGTTGCGGGTTACAGCTATGGTCTTATTGGTATCCGGCCCCTTTCGAGTCGCGATGCGCCTGCCACCACGATATTCGCCCGAAACGCGATTTGTGGGCGAGGTAGTCGTGTTCAACCCTGTAAATTTCCCTAGGTATAATCGTTCTAAGGTTCGCACATACACATCCACACCTACCTTTACACAGTTCGAGGTTCTATACGTCCTCTGAGTGCGTGTTAACACGCCCGTAAATGGGCATTTGGAGTCAGACCAGTACTTTGCGATAAACTTTACTTCCGCGAGACCTGTCCCTGGAACCCTGTTGTAAGGGTTAGGGTTTAATAGCTCCATGTCGTGTGCCTATAAGAAAAGGACGAATGGTGACAGTCCGGCTTAGCCAGGACAATGCGTGGCTGACGACGTCCAGGGTAAATTGAGTTGAATTCGCCTAATTTTAGGGTGTCTTGGTTCAATGAGGTGTCGACTTAACAAAAGGCGACATCAGTTGTCATCTTGCCTTGATAAAGTAAAACACGTGAATAGCCTATCCGGTCTGACCCCCGGGCCATGTGCTTCACCCAGGGAGCATCGCCGCTCTAGAGACGGTGTTCGTAGTCTCGATAACATGTGGGGTAATATAGAATATCCAAGACCGGTAGGAGGGGCGGTTCCGCGTCATAAGAAGTCCCAACGTGGCCTGCCACGTTCAAACAGGATACGCTATAACAGCTTCGTGGGTAATTGATGGATACGCCCGCAGGCTACCCATGCTCTTGCGATTTTGCAACCCTCGGAACCGTCACTCGTACACCCAGACATCATCTCATACAATTGCCTCACCTTCATGCCGGTACATAGGTGCCATCTCCGCTTAAGAATCCTCGCAGCAATTAATGTGACAGCACGCTAGTCCACTAGCGTATGATTACGCCACCGGGCCACCATGGACAAAAACGTTGAATTCCGACTAATAGACGAGTGTCCGATCGGGTCAACCGATCTCGGATGTTGCGTACCAGGACTACTGGGCTCGGGCCGAATCAGACACACGTATGCAACAGATACCGATAGGCGTCTTCCTAAGTAACAGCCGTAATCAATGGTGCCACAGATCTACTAATTACGGTGAAGATCATGGCCCACGACGCTGTACGGGTTTATAGCTGCCACAAACTTTAGGAAGTTTCAGCAATCGACGCGTAGTATGTGTGCTCAGACGGGTCGAGCATGCACTTGTGTATTAAGTTACTTGGCTGAACAACCTGTTGATAGATCTTGAGAGGACCGAGAAATTGCCCTCCGGTTATGAAACAGGTCCTGCGTACCAATCCTT');
// const test
// const targetTest2 = { A: 1200 };
// const firstTestString = [ 0, 1403, { A: 1200, G: 31, T: 54, C: 119 } ]


// console.log( findTargetLetters(test2) );
// console.log( findFirstSubstring(test2, targetTest2) );
// console.log( decrementLeft(test2, targetTest2, ...firstTestString) )
// console.log( steadyGene(test2) );

module.exports = {
    findTargetLetters,
    steadyGene,
    findFirstSubstring,
    findIfShouldReplaceGene,
    decrementLeft,
}